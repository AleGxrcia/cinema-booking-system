// <auto-generated />
using System;
using System.Collections.Generic;
using CinemaBookingSystem.Modules.Movies.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CinemaBookingSystem.Modules.Movies.Infrastructure.Data.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    partial class MovieDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("movies")
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CinemaBookingSystem.Modules.Movies.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_genres");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_genres_is_active");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_genres_name_unique");

                    b.ToTable("genres", "movies");
                });

            modelBuilder.Entity("CinemaBookingSystem.Modules.Movies.Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AgeRating")
                        .HasColumnType("integer")
                        .HasColumnName("age_rating");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("poster_url");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer")
                        .HasColumnName("release_year");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TrailerUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("trailer_url");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Duration", "CinemaBookingSystem.Modules.Movies.Domain.Entities.Movie.Duration#Duration", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("TotalMinutes")
                                .HasColumnType("integer")
                                .HasColumnName("duration_minutes");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Language", "CinemaBookingSystem.Modules.Movies.Domain.Entities.Movie.Language#MovieLanguage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("language_code");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("language_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "CinemaBookingSystem.Modules.Movies.Domain.Entities.Movie.Title#MovieTitle", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("NormalizedValue")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("normalized_title");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_movies");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_movies_created_at");

                    b.HasIndex("ReleaseYear")
                        .HasDatabaseName("IX_movies_release_year");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_movies_status");

                    b.ToTable("movies", "movies");
                });

            modelBuilder.Entity("CinemaBookingSystem.Modules.Movies.Domain.Entities.MovieCast", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid")
                        .HasColumnName("movie_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("person_name");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_movie_casts");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("IX_movie_casts_movie_id");

                    b.HasIndex("PersonName")
                        .HasDatabaseName("IX_movie_casts_person_name");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_movie_casts_role");

                    b.HasIndex("MovieId", "Order")
                        .HasDatabaseName("IX_movie_casts_movie_order");

                    b.ToTable("movie_casts", "movies");
                });

            modelBuilder.Entity("CinemaBookingSystem.Modules.Movies.Domain.Entities.MovieGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid")
                        .HasColumnName("genre_id");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid")
                        .HasColumnName("movie_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_movie_genres");

                    b.HasIndex("GenreId")
                        .HasDatabaseName("IX_movie_genres_genre_id");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("IX_movie_genres_movie_id");

                    b.HasIndex("MovieId", "GenreId")
                        .IsUnique()
                        .HasDatabaseName("IX_movie_genres_movie_genre_unique");

                    b.ToTable("movie_genres", "movies");
                });

            modelBuilder.Entity("CinemaBookingSystem.Modules.Movies.Domain.Entities.MovieCast", b =>
                {
                    b.HasOne("CinemaBookingSystem.Modules.Movies.Domain.Entities.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_casts_movies_movie_id");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CinemaBookingSystem.Modules.Movies.Domain.Entities.MovieGenre", b =>
                {
                    b.HasOne("CinemaBookingSystem.Modules.Movies.Domain.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_genres_genres_genre_id");

                    b.HasOne("CinemaBookingSystem.Modules.Movies.Domain.Entities.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_genres_movies_movie_id");

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CinemaBookingSystem.Modules.Movies.Domain.Entities.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Genres");
                });
#pragma warning restore 612, 618
        }
    }
}
